;; -*- mode: clojure -*-

(defmacro do [& forms]
  (list (list* 'fn [] forms)))

(defmacro defn [name args & body]
  (list 'def name
        (list* 'fn name args body)))

(defmacro if-not
  ([test then]
     (list 'if-not test then nil))
  ([test then else]
     (list 'if (list 'not test) then else)))

(defmacro when [test & body]
  (list 'if test
        (cons 'do body)
        nil))

(defmacro when-not [test & body]
  (list* 'when (list 'not test) body))

(defn reduce
  ([f coll]
     (if (seq coll)
       (reduce f (first coll) (rest coll))
       (f)))
  ([f val coll]
     (if (seq coll)
       (reduce f (f val (first coll)) (rest coll))
       val)))

(defn fold-right [f val coll]
  (if (seq coll)
    (f (first coll) (fold-right f val (rest coll)))
    val))

(defn map [f coll]
  (reduce (fn [result x] (conj result (f x)))
          []
          coll))

(defn mapcat [f coll]
  (reduce (fn [result x] (into result (f x)))
          []
          coll))

(defmacro let [bindings & body]
  (when-not (even? (count bindings))
    (error "let requires an even number of forms in binding vector"))
  (reduce (fn [result binding]
            (list (list 'fn
                        (vector (first binding))
                        result)
                  (second binding)))
          (cons 'do body)
          (reverse (partition-all 2 bindings))))

(defmacro when-let [bindings & body]
  (when-not (= (count bindings) 2)
    (error "when-let requires exactly two forms in bindings vector"))
  (let [[binds expr] bindings
        sym (gensym)]
    (list 'let [sym expr, binds sym]
          (list* 'when sym body))))

(defmacro if-let
  ([bindings then]
     (list 'if-let bindings then nil))
  ([bindings then else]
     (when-not (= (count bindings) 2)
       (error "if-let requires exactly two forms in bindings vector"))
     (let [[binds expr] bindings
           sym (gensym)]
       (list 'let [sym expr, binds sym]
             (list 'if sym then else)))))

(defmacro cond [& clauses]
  (reduce (fn [result clause]
            (when-not (= (count clause) 2)
              (error "odd number of clauses to cond"))
            (list 'if (first clause) (second clause) result))
          nil
          (reverse (partition-all 2 clauses))))

(defmacro condp [pred expr & clauses]
  ;; TODO: See if I can clean this up
  (let [reversed (reverse (partition-all 2 clauses))
        default? (= (count (first reversed)) 1)
        default (if default?
                  (cons 'do (first reversed))
                  (list 'error "condp: no matching clause"))
        clauses (if default?
                  (rest reversed)
                  reversed)
        pred-sym (gensym)
        expr-sym (gensym)]
    (list 'let [pred-sym pred expr-sym expr]
          (reduce (fn [result clause]
                    (list 'if
                          (list pred-sym (first clause) expr-sym)
                          (second clause)
                          result))
                  default
                  clauses))))

(defmacro or
  ([] nil)
  ([x] x)
  ([x & more]
     (let [sym (gensym)]
       (list 'let [sym x]
             (list 'if sym sym (cons 'or more))))))

(defmacro and
  ([] true)
  ([x] x)
  ([x & more]
     (let [sym (gensym)]
       (list 'let [sym x]
             (list 'if sym (cons 'and more) sym)))))

(defmacro letfn [bindings & body]
  (list* 'let
         (mapcat (fn [name] (list name :undefined))
                 (map first bindings))
         (concat (map (fn [form]
                        (when-not (= (count form) 3)
                          (error "malformed letfn binding"))
                        (let [[name args body] form]
                          (list 'set! name (list 'fn name args body))))
                      bindings)
                 body)))

(defn remove [pred coll]
  (reduce (fn [result x]
            (if (not (pred x))
              (conj result x)
              result))
          []
          coll))

(defn filter [pred coll]
  (reduce (fn [result x]
            (if (pred x)
              (conj result x)
              result))
          []
          coll))

(defn partial [f & args]
  (fn [& more]
    (apply f (concat args more))))

(defn comp [& fs]
  (reduce (fn [result f]
            (fn [& args]
              (result (apply f args))))
          identity
          fs))

(defn juxt [& fs]
  (fn [& args]
    (reduce (fn [result f]
              (conj result (apply f args)))
            []
            fs)))

(defn constantly [x]
  (fn [& args]
    x))

(defn complement [f]
  (comp not f))

(defn fnil [f x]
  (fn [& args]
    (if (and (seq args)
             (nil? (first args)))
      (apply f (cons x (rest args)))
      (apply f args))))

(defn group-by [f coll]
  (reduce (fn [result x]
            (let [k (f x)]
              (update-in result [k] (fnil conj []) x)))
          {}
          coll))

(defn every? [pred coll]
  (cond (empty? coll) true
        (not (pred (first coll))) false
        :else (every? pred (rest coll))))

(def not-every? (comp not every?))

(defn some [pred coll]
  (when-let [[x & xs] (seq coll)]
    (if (pred x)
      x
      (some pred xs))))

(def not-any? (comp not some))

(defn take-while [pred coll]
  (let [recur (fn recur [coll acc]
                (if (and (seq coll)
                         (pred (first coll)))
                  (recur (rest coll) (conj acc (first coll)))
                  acc))]
    (recur coll [])))

(defn drop-while [pred coll]
  (let [recur (fn recur [coll]
                (if (and (seq coll)
                         (pred (first coll)))
                  (recur (rest coll))
                  coll))]
    (recur coll)))

(defn split-with [pred coll]
  ((juxt (partial take-while pred)
         (partial drop-while pred))
   coll))

(defn map-indexed [f coll]
  (let [recur (fn recur [i coll acc]
                (if-let [[x & xs] (seq coll)]
                  (recur (inc i) xs (conj acc (f i x)))
                  acc))]
    (recur 0 coll [])))

(defn keep-indexed [f coll]
  (let [recur (fn recur [i coll acc]
                (if-let [[x & xs] (seq coll)]
                  (let [r (f i x)]
                    (if-not (nil? r)
                      (recur (inc i) xs (conj acc r))
                      (recur (inc i) xs acc)))
                  acc))]
    (recur 0 coll [])))

(defn reductions [f val coll]
  (let [recur (fn recur [val coll acc]
                (if-let [[x & xs] (seq coll)]
                  (let [r (f val x)]
                    (recur r xs (conj acc r)))
                  acc))]
    (recur val coll [val])))

(defmacro ->
  ([x] x)
  ([x form]
     (if (seq? form)
       (list* (first form) x (next form))
       (list form x)))
  ([x form & more]
     (list* '-> (list '-> x form) more)))

(defmacro ->>
  ([x form]
     (if (seq? form)
       (cons (first form) (concat (next form) (list x)))
       (list form x)))
  ([x form & more]
     (list* '->> (list '->> x form) more)))
